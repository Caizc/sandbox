local protobuf = require 'protobuf'
protobuf.register(CS.UnityEngine.Resources.Load('proto/UserInfo.pb').bytes)
protobuf.register(CS.UnityEngine.Resources.Load('proto/User.pb').bytes)

local userInfo = {}
userInfo.name = 'world'
userInfo.diamond = 998
userInfo.level = 100

local user = { }
user.id = 1
user.status = { 1,0,2,4}
user.pwdMd5 = 'md5'
user.regTime = '2017-03-29 12:00:00'
user.info = userInfo

-- 序列化
local encode = protobuf.encode('User', user)

-- 反序列化
local user_decode = protobuf.decode('User', encode)

assert(user.id == user_decode.id and user.info.diamond == user_decode.info.diamond)
print('hello', user_decode.info.name)
print('status', user_decode.status)

print('======')

protobuf.register(CS.UnityEngine.Resources.Load('proto/AddressBook.pb').bytes)

local phoneNumber1 = { }
phoneNumber1.number = '139XXXXXXXX'
phoneNumber1.type = 'HOME'

local phoneNumber2 = { }
phoneNumber2.number = '189XXXXXXXX'
phoneNumber2.type = 'WORK'

local mapFieldEntry1 = { }
mapFieldEntry1.key = 'A'
mapFieldEntry1.value = phoneNumber1

local mapFieldEntry2 = { }
mapFieldEntry2.key = 'B'
mapFieldEntry2.value = phoneNumber2

local person = { }
person.name = 'Jason'
person.id = 7
person.email = 'jason@gmail.com'
person.married = true
person.partner = 'Katty'
person.phones = { phoneNumber1, phoneNumber2 }
person.pnmap = { mapFieldEntry1, mapFieldEntry2 }
person.phonemap = { [3] = C, [4] = D }

-- 序列化
local encode2 = protobuf.encode('tutorial.Person', person)

-- 反序列化
local person_decode = protobuf.decode('tutorial.Person', encode2)

print('name: ', person_decode.name)
print('id: ', person_decode.id)
print('email: ', person_decode.email)
print('married: ', person_decode.married)
print('partner: ', person_decode.partner)

local nums = person_decode.phones
for i = 1, #nums do
	print('PhoneNumber.number: ', nums[i].number)
	print('PhoneNumber.type: ', nums[i].type)
end

-- 使用旧版本的语法可以模拟实现 protobuf v3 版本中的 Map 语法
local pnmap = person_decode.pnmap
print('pnmap: ', pnmap)
for i = 1, #pnmap do
	print('MapEntry:', pnmap[i].key, pnmap[i].value.number, pnmap[i].value.type)
end

-- 初步测试结果得出 pbc 对 protobuf v3 新增的 Map 语法不支持
local phonemap = person_decode.phonemap
-- 可以获得该 map 引用，但无法解析其中的内容
print('phonemap: ', phonemap)
for k, v in pairs(phonemap) do
	print('phonemap: ', k, v)
end
-- for i = 1, #phonemap do
-- 	print('phonemap: ', phonemap[i])
-- end

print('-End-')